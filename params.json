{
  "name": "RubyNEAT",
  "tagline": "Ruby Neural Evolution of Augmenting Topologies (NEAT)",
  "body": "# Introduction to RubyNEAT\r\n\r\n## What is NEAT?\r\nNEAT is an acronym for Neural Evolution of Augmenting Topologies. In short, neural nets that are evolved from a minimal topology, allowing selection to decide on what topologies are most adequate for resolving the problem at hand.\r\n\r\n## What is RubyNEAT?\r\nRubyNEAT is the world's first (and currently only) implementation of the NEAT algorithm in the Ruby programming language. RubyNEAT leverages some of the benefits of Ruby, such as metaprogramming, to implement activation of the Neural Net.\r\n\r\nBasically, the Neural Nets in RubyNEAT manifests themselves in the Phenotypes as functional programs -- of a sort. You may think of it as an application of Genetic Programming techniques to resolving the NEAT algorithm. As such, once fit Critters (neural nets) are found, they may be extracted as pure Ruby code, not needing the RubyNEAT engine for activation.\r\n\r\n## Architecture\r\n\r\nRubyNEAT comprises many interacting modules. While it is not strictly necessary to understand RubyNEAT at this level of detail, it would be beneficial for a number of reasons, especially in understanding how to tweak the parameters to improve performance for your application. \r\n\r\nRubyNEAT comprises the following modules: Controller, Expressor, Evaluator, Evolver, Population, and Critter.\r\n\r\n#### Controller\r\nThe Controller mediates all aspects of RubyNEAT evolution, the various modules involved and their interactions, and also holds the settings the other modules will refer to. \r\n\r\nThe Controller is singular. There can only be one Controller in the RubyNEAT system. All other objects associated with the Controller shall have embedded in them a reference to their controller.\r\n\r\n#### Evolver\r\nThe Evolver module houses the evolving algorithms for RubyNEAT. It evolves the entire Population of Critters.\r\n\r\n#### Expressor\r\nThe Expressor module is responsible for interpreting the Genotype of the Critters and creating their Phenotypes. The default Expressor generates Ruby code and attaches that code to the Phenotype instances of the Critter. \r\n\r\nIt is entirely possible to swap in a different Expressor and generate code for a different target language, or create some other construct. There is no limit to what you could have an Expressor do.\r\n\r\n#### Evaluator\r\nThe Evaluator is a kind of bridge between the inner \"biology\" of the RubyNEAT \"ecosystem\" and the outside world. It has ties to the RubyNEAT DSL where you encode your own fitness functions and data links to some external problem space. It is, in a sense, the \"gateway\".\r\n\r\n#### Population\r\nThe Population is what your intuition tells you. It is a environment that houses a collection of Critters. \r\n\r\n#### Critter\r\nThe Critter is the embodiment of both the genetics for the neural net and also the expression of the same. It contains, in other words, the Genotype and the Phenotype.\r\n\r\nCritters are mated through the Evolver, and have their genes expressed through the Expressor. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}